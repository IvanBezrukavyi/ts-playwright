name: Running Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run tests on a daily basis at 9:30 AM UTC
    - cron: "30 9 * * *"

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    env:
      AUTH_LOGIN_END_POINT: ${{ secrets.AUTH_LOGIN_END_POINT }}
      AUTH_FILE: ${{ secrets.AUTH_FILE }}
      CLIENT_APP_URL: ${{ secrets.CLIENT_APP_URL }}
      USER_EMAIL: ${{ secrets.USER_EMAIL }}
      USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
      SINGLE_FILE_PATH: ${{ secrets.SINGLE_FILE_PATH }}
      MULTI_FILE_PATHS: ${{ secrets.MULTI_FILE_PATHS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Store Playwright Version
        run: |
          PLAYWRIGHT_VERSION=$(node -p "require('./package.json').devDependencies['@playwright/test']")
          echo "PLAYWRIGHT_VERSION=${PLAYWRIGHT_VERSION}" >> $GITHUB_ENV

      - name: Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright (if no cache)
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright Dependencies (if cached)
        if: steps.cache-playwright-browsers.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Run Playwright Tests
        run: |
          npx playwright test -g clientAppWithExternalDataAndParametriazation.spec.ts
          # npx playwright test --grep "@Demoqa | @Web"

      - name: Store Results from Failed Tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          retention-days: 7

  report:
    name: Generate & Deploy Allure Report
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout gh-pages for Allure history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Checkout current source code
        uses: actions/checkout@v4

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Prepare Allure History Directory
        run: |
          # Ensure the target directory exists (created by the current user)
          mkdir -p allure-history
          echo "Ensured allure-history directory exists."

          # Check if the source directory exists and has content before copying
          if [ -d "allure-report" ] && [ "$(ls -A allure-report)" ]; then
            echo "Source 'allure-report' found and contains files. Copying contents..."
            cp -r allure-report/* allure-history/ || sudo cp -r allure-report/* allure-history/
            echo "Copy completed."
          elif [ -d "allure-report" ]; then
            # This handles the case where the directory exists but is empty
            echo "Source 'allure-report' exists but is empty. Nothing to copy."
          else
            # This handles the case where the directory doesn't exist at all
            echo "Source 'allure-report' directory not found. Nothing to copy."
          fi
        shell: bash
      
      - name: Get Deployment Date and Time
        id: get_date
        run: echo "::set-output name=now::$(date +'%a %b %d %H:%M:%S %Z %Y')" # Format the date as needed

      - name: Add Deployment Info to HTML
        run: |
          # Define the commit hash
          COMMIT_HASH="${{ github.sha }}"
          SHORT_COMMIT_HASH="${COMMIT_HASH::7}" # Get the first 7 characters

          # Define the deployment date and time
          DEPLOY_DATE="${{ steps.get_date.outputs.now }}"

          # Construct the HTML snippet for the commit link
          # Replace 'IvanBezrukavyi/ts-playwright' with your repo path if different
          # Ensure the URL is correct for your repository
          COMMIT_LINK_HTML='<a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/IvanBezrukavyi/ts-playwright/commit/'"${COMMIT_HASH}"'/hovercard" href="https://github.com/IvanBezrukavyi/ts-playwright/commit/'"${COMMIT_HASH}"'"><tt>'"${SHORT_COMMIT_HASH}"'</tt></a>'

          # The full string to insert
          FULL_DEPLOY_INFO="Automated deployment: ${DEPLOY_DATE} ${COMMIT_LINK_HTML}"

          # --- Modify your HTML file ---
          # This uses sed to insert the info just before the closing </body> tag
          # You might need to adjust the insertion point based on the Allure report's index.html structure
          # We are targeting the index.html within the directory that will be published (allure-history)
          sed -i "/<\/body>/i <p>${FULL_DEPLOY_INFO}</p>" allure-history/index.html
        shell: bash
      
      - name: List Contents of Allure History Directory
        run: ls -la allure-history
        continue-on-error: true    

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3.9.1
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          allow_empty_commit: false
          keep_files: false
          force_orphan: false
          enable_jekyll: false
          disable_nojekyll: false
          exclude_assets: .github